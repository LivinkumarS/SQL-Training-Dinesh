Database ---> A database is a structured collection of data. It helps store and manage information efficiently.
example: stores user data, purchases, favlist..

Table ---> Stores data in rows and columns.

sno  name     dob              password
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************

sno  id       dop              purchase
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************
1    saala    28/05/2003       **************


operations we gonna perform with data ---> CRUD--> Create Read Update Delete.

Relational---> Organizes data into tables(ex: mySQL, PostreSQL, Oracle).
Non-Relational---> Uses Documants (json..) { "name":"username", "dob":"28/05/2003", "password":"password" },{ "name":"username", "dob":"28/05/2003", "password":"password" }. example: mongoDB.


MySQL 
--------
RDBMS-> Relational  Database Management System.
Uses SQL--> Structured Query Language.

What Can you Do with it?
--------------------------
1) Store data.
2) Query data.
3) Update records.
4) Delete Records
5) connect to web apps. 

DataTypes
-----------
Number
-------
INT--->whole numbers
TINYINT---> 1 byte (2^8).
BIGINT---> large numbers
FLOAT---> 1.2334, 3.3443, 0.343343

String
--------
VARCHAR(n)---> variable-length string (upto n char).
CHAR(n)---> fixed length string.
TEXT--->Large block of text

Date and Time Data Types.
-----------------------------

DATE---> Date only.
TIME----> Only time.
DATETIME---> Full date and time.


Boolean
--------------
BOOLEAN ---> True/False

Column Constraints
-------------------
1)NOT NULL--> Prevents Null values.
2)AUTO_INCREMENT
3) primary key
4) UNIQUE
5)default

6) Foreign key---> refers to primary key in another table.

Queries
---------------
Create Database---> CREATE DATABASE learn_sql;
To use Database---> USE learn_sql;
To create Table---> CREATE TABLE sample_users ( columns );

To Retrive Data---> SELECT
-------------------------------

*----> to get all the columns.(filtering col).
to filter rows(data)--> WHERE condition

Pattern Matching ---> LIKE.

'char%'---> starting
'%char'---> ending
'%char%'---> contains

Combine two conditions ---> AND, OR
Limit results---> LIMIT

Range filtering---> BETWEEN
Ordering(Sorting) Result---> ORDER BY (ASC, DESC)


Updating and Deleting Data
---------------------------
Update---> Modifing the existing data.

UPDATE, SET.

example--->UPDATE users SET userName='livinkumar s', email='slivinkumarkrr@gmail.com' where id=4; 
Danger zone-->UPDATE users SET userName='livinkumar s', email='slivinkumarkrr@gmail.com' (without condition).


DELETE, FROM.
ex:
DELETE FROM users WHERE id=5;

SET SQL_SAFE_UPDATES=1;
DELETE FROM users WHERE isActive='inactive';

Danger Zone---> DELETE FROM users (without condition)


To descibe structures---> DESCRIBE table_name;
To Insert DATA---> INSERT INTO sample_users (id, name, email) VALUES (3, 'Dinesh','dinesh@gmail.com');


Altering and Deleting Table
----------------------------
Delete--> DROP TABLE "table's name"

Altering ---> ALTER.
ALTER TABLE users ADD dummy VARCHAR(100);
ALTER TABLE users DROP COLUMN dummy;
ALTER TABLE users RENAME COLUMN dummy TO emptyCol;


Renaming a Table ---> 
RENAME TABLE users TO userData;


Relation Ships  and Foreign Keys
----------------------------------

  foreign key (user_id) references users(id)

Types of Joins
-----------------

1)Inner Join
2)left Join 
3)Right join

Joins are used to combine two or more related tables based on a common column.

Inner Joins.
-------------
Returns only matching rows.
>>select users.id, users.name, marks.mark from users inner join marks on users.id=marks.userId;
it ensures we only get mark with valid users.

Left join 
-------------
ensures all rows from left table are shown and matches rows from the right.

Right join 
-------------
ensures all rows from right table are shown and matches rows from the left.